@startuml

title Calibration State

package "Application" as appLayer {

    class CalibrationState <<control>> {
        + {static} getInstance() : CalibrationState
        + entry() : void
        + process(sm : StateMachine&) : void
        + exit() : void
    }

    class ReadyState <<control>>
    class ErrorState <<control>>

    CalibrationState ..> ReadyState: <<use>>
    CalibrationState ..> ErrorState: <<use>>
}

package "HAL" as hal {

    package "Interfaces" as halInterfaces {
        interface IDisplay {
            + {abstract} clear() : void
            + {abstract} gotoXY(xCoord : uint8_t, yCoord : uint8_t) : void
            + {abstract} print(str : const String&) : size_t
            + {abstract} print(str : const char[]) : size_t
            + {abstract} print(value : uint8_t) : size_t
            + {abstract} print(value : uint16_t) : size_t
            + {abstract} print(value : uint32_t) : size_t
            + {abstract} print(value : int8_t) : size_t
            + {abstract} print(value : int16_t) : size_t
            + {abstract} print(value : int32_t) : size_t
        }

        interface IMotors {
            + {abstract} setSpeeds(leftSpeed : int16_t, rightSpeed : int16_t) : void
            + {abstract} getMaxSpeed() : int16_t
        }

        interface ILineSensors {
            + {abstract} init() : void
            + {abstract} calibrate() : void
            + {abstract} readLine() : int16_t
            + {abstract} getSensorValues() : const uint16_t*
            + {abstract} getNumLineSensors() const : uint8_t
            + {abstract} getSensorValueMax() const : uint16_t
        }
    }

    class Board << namespace >> {
        + getDisplay() : IDisplay&
        + getMotors() : IMotors&
        + getLineSensors() : ILineSensors&
    }
}

CalibrationState ...> IDisplay: <<use>>
CalibrationState ...> IMotors: <<use>>
CalibrationState ...> ILineSensors: <<use>>
CalibrationState ...> Board:: <<use>>

@enduml